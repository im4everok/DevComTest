@using BLL.Interfaces;
@using BLL.Models;
@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using X.PagedList.Web.Common;
@model IPagedList<PersonModel>;
@inject IPersonService PersonService;

@{
ViewData["Title"] = "All users";
}

<h1 class="text-center">All users</h1> 

<form asp-action="AllUsers" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" />
            @Html.ActionLink("back to full list", "AllUsers", "Person");
        </p>
    </div>
</form>
@Html.ActionLink("Add", "Create", "Person", null, new { @class= "btn btn-default btn-primary float-right" })
<br />
<div class="align-content-center justify-content-center">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Name</th>
                <th>Pets Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var p in Model)
            {
                if(p != null)
                {
                    <tr>
                        <td>
                            @Html.ActionLink(p.Name, "Details", "Person", new { id = p.Id})
                        </td>
                        <td>
                            @await PersonService.GetPersonPetCountAsync(p.Id)
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("AllUsers", "Person", new { page }), new PagedListRenderOptions
{
    LiElementClasses = new string[] { "page-link"}
})